{"version":3,"sources":["src/GraphQlQuery.ts"],"names":[],"mappings":"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","file":"src/GraphQlQuery.js","sourcesContent":["namespace gql {\n\texport interface GraphQlQueryFactory {\n\t\tnew (fnName: string | IAlias, argumentsMap?: IArgumentsMap): GraphQlQuery;\n\t}\n\n\texport interface IArgumentsMap {\n\t\t[index: string]: string|number|boolean|Object;\n\t}\n\n\texport interface IAlias {\n\t\t[index: string]: string | GraphQlQuery;\n\t}\n\n\texport interface IHead {\n\t\tfnName: IAlias;\n\t\targumentsMap?: IArgumentsMap;\n\t}\n\n\texport interface IBody {\n\t\tattr: IAlias;\n\t\targumentsMap?: IArgumentsMap;\n\t}\n\n\texport interface ISelection extends IArgumentsMap {\n\t\t_filter?: Object;\n\t}\n\n\texport class GraphQlQuery {\n\t\tprivate head: IHead;\n\t\tprivate body: (IBody|GraphQlQuery)[];\n\t\tprivate isContainer: boolean;\n\n\t\tconstructor(fnName: string | IAlias, argumentsMap: IArgumentsMap = {}) {\n\t\t\tthis.head = typeof fnName === 'string' ? {fnName: {[fnName]: fnName}} : {fnName};\n\t\t\tthis.head.argumentsMap = argumentsMap;\n\t\t\tthis.body = [];\n\t\t\tthis.isContainer = false;\n\t\t}\n\n\t\tpublic select(...selects: (string | ISelection | GraphQlQuery)[]): GraphQlQuery {\n\t\t\tif (this.isContainer) {\n\t\t\t\tthrow new Error('Can`t use selection on joined query.');\n\t\t\t}\n\n\t\t\tthis.body = this.body.concat(selects.map((item) => {\n\t\t\t\tlet selection: any = {};\n\n\t\t\t\tif (typeof item === 'string') {\n\t\t\t\t\tselection.attr = {[item]: item};\n\t\t\t\t\tselection.argumentsMap = {};\n\t\t\t\t} else if (item instanceof GraphQlQuery) {\n\t\t\t\t\tselection = item;\n\t\t\t\t} else if (typeof item === 'object') {\n\t\t\t\t\tselection.argumentsMap = <IArgumentsMap>item['_filter'] || {};\n\t\t\t\t\tdelete item['_filter'];\n\t\t\t\t\tselection.attr = <IAlias>item;\n\t\t\t\t}\n\n\t\t\t\treturn selection;\n\t\t\t}));\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic filter(argumentsMap: IArgumentsMap): GraphQlQuery {\n\t\t\tfor (let key in argumentsMap) {\n\t\t\t\tif (argumentsMap.hasOwnProperty(key)) {\n\t\t\t\t\tthis.head.argumentsMap[key] = argumentsMap[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic join(...queries: GraphQlQuery[]): GraphQlQuery {\n\t\t\tconst combined = new GraphQlQuery('');\n\t\t\tcombined.isContainer = true;\n\t\t\tcombined.body.push(this);\n\t\t\tcombined.body = combined.body.concat(queries);\n\n\t\t\treturn combined;\n\t\t}\n\n\t\tpublic toString() {\n\t\t\treturn this.isContainer ? `{ ${this.buildBody()} }` : `{ ${this.buildHeader()}{${this.buildBody()}} }`;\n\t\t}\n\n\t\tprivate buildHeader(): string {\n\t\t\treturn this.handleAlias(this.head.fnName) + this.handleArguments(this.head.argumentsMap);\n\t\t}\n\n\t\tprivate handleArguments(argumentsMap: IArgumentsMap): string {\n\t\t\tconst query = this.objectToString(argumentsMap);\n\n\t\t\treturn query ? `(${query})` : '';\n\t\t}\n\n\t\tprivate getGraphQLValue(value) {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst array = value.map(item => {\n\t\t\t\t\treturn this.getGraphQLValue(item);\n\t\t\t\t}).join();\n\n\t\t\t\treturn `[${array}]`;\n\t\t\t} else if (\"object\" === typeof value) {\n\t\t\t\treturn `{${this.objectToString(value)}}`;\n\t\t\t} else {\n\t\t\t\treturn JSON.stringify(value);\n\t\t\t}\n\t\t}\n\n\t\tprivate objectToString(obj) {\n\t\t\treturn Object.keys(obj).map((key) => `${key}: ${this.getGraphQLValue(obj[key])}`).join(', ');\n\t\t}\n\n\t\tprivate handleAlias(attr: IAlias): string {\n\t\t\tlet alias = Object.keys(attr)[0];\n\t\t\tlet value = this.prepareAsInnerQuery(attr[alias]);\n\n\t\t\tvalue = (alias !== value) ? `${alias}: ${value}` : value;\n\t\t\treturn value;\n\t\t}\n\n\t\tprivate buildBody(): string {\n\t\t\treturn this.body.map((item: IBody | GraphQlQuery) => {\n\t\t\t\tif (item instanceof GraphQlQuery) {\n\t\t\t\t\treturn this.prepareAsInnerQuery(item);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.handleAlias(item['attr']) + this.handleArguments(item['argumentsMap']);\n\t\t\t\t}\n\t\t\t}).join(' ');\n\t\t}\n\n\t\tprivate prepareAsInnerQuery(query: string|GraphQlQuery): string {\n\t\t\tlet ret = '';\n\t\t\tif (query instanceof GraphQlQuery) {\n\t\t\t\tret = query.toString();\n\t\t\t\tret = ret.substr(2, ret.length - 4);\n\t\t\t} else {\n\t\t\t\tret = query.toString();\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n}\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = gql.GraphQlQuery;\n}\n"],"sourceRoot":"/source/"}